/**
 * 
 */
package com.cshf.util;

import java.sql.*;
import java.util.List;
import java.sql.SQLException;

public final class DbUtil {
	private static final String dbUrl = "jdbc:mysql://localhost:3306/second_hand_forum?useUnicode=true&characterEncoding=UTF8&useSSL=true&allowMultiQueries=true";
	private static final String dbDriver = "com.mysql.jdbc.Driver";
	private static final String dbUser = "root";
	private static final String dbPassword = "123";

	public static Connection openNewConnection() {
		Connection conn = null;

		try {
			Class.forName(dbDriver);
			conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}

		return conn;
	}

	public static PreparedStatement getPreparedStatement(Connection conn, String sql) {
		try {
			return conn.prepareStatement(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	
	public static PreparedStatement getPreparedStatement(Connection conn, String sql, int autoGeneratedKeys) {
		try {
			return conn.prepareStatement(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	public static Statement getStatement(Connection conn) {
		try {
			return conn.createStatement();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	public static void closePreparedStatement(PreparedStatement pstm) {
		try {
			if (null != pstm) {
				pstm.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public static void closeStatement(Statement st) {
		try {
			if (null != st) {
				st.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public static void closeConnection(Connection conn) {
		try {
			if (null != conn) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void setPreparedStatementParams(final PreparedStatement psmt, final List<Object> params) throws SQLException {
		int startIndex = 1;
		for(Object obj : params) {
				psmt.setObject(startIndex++, obj);
		}
	}


}
